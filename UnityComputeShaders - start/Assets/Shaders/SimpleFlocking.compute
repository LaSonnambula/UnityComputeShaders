#pragma kernel CSMain
#define GROUP_SIZE 256

struct Boid
{
	float3 position;
	float3 direction;
};

RWStructuredBuffer<Boid> boidsBuffer;

float time;
float deltaTime;
float rotationSpeed;
float boidSpeed;
float boidSpeedVariation;
float3 flockPosition;
float neighbourDistance;
int boidsCount;

[numthreads(GROUP_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Boid boid = boidsBuffer[id.x];
    float3 separation = 0;
    float3 alignment = 0;
    float3 cohesion = flockPosition;
    
    uint nearbyCount = 1;
    
    for (int i = 0; i < boidsCount;i++)
    {
        if (i != id.x)
        {
            Boid tempBoid = boidsBuffer[i];
            if(distance(boid.position, tempBoid.position) < neighbourDistance)
            {
                float3 offset = boid.position - tempBoid.position;
                float dist = length(offset);
                if(dist < neighbourDistance)
                {
                    dist = max(dist, 0.0000001);
                    separation += offset * (1.0 / dist - 1.0 /neighbourDistance);
               
                }
                alignment += tempBoid.direction;
                cohesion += tempBoid.position;
                //separation += (boid.position - tempBoid.position);
                nearbyCount++;
            }
        
        }
    }
    float avg = 1.0 / nearbyCount;
    //average dir
    alignment *= avg;
    //find the center postion
    cohesion *= avg;
    //future dir to the center
    cohesion = normalize(cohesion - boid.position);
    
    float3 direction = alignment + separation + cohesion;
    
    //lerp to the new direction
    boid.direction = lerp(direction, normalize(boid.direction), 0.94);
    boid.position += boid.direction * deltaTime;
    boidsBuffer[id.x] = boid;
}


